import React, { useState, useEffect } from 'react';
import '../../styles/Step35.css';

const FOOD_ICONS = {
  // Rau
  'B√¥ng c·∫£i xanh': 'ü•¶', 'S√∫p l∆°': 'ü•¶', 'H√†nh': 'üßÖ', '·ªöt chu√¥ng': 'ü´ë',
  'C√† t√≠m': 'üçÜ', 'B·∫Øp c·∫£i': 'ü•¨', 'MƒÉng t√¢y': 'ü•¨', 'Rau ch√¢n v·ªãt': 'ü•ó',
  'Qu·∫£ d∆∞a chu·ªôt': 'ü•í', 'C√† chua': 'üçÖ',
  // Ng≈© c·ªëc
  'G·∫°o': 'üçö', 'Di√™m m·∫°ch': 'üåæ', 'C∆°m couscous': 'üçö', 'Ki·ªÅu m·∫°ch': 'üåæ',
  'H·∫°t k√™': 'üå∞', 'H·∫°t d·ªÅn': 'üå∞', 'B·ªôt m√¨ Semolina': 'üçû', 'B·ªôt ng√¥': 'üåΩ',
  'L√∫a m√¨ Bulgur': 'üåæ',
  // Nguy√™n li·ªáu
  'B∆°': 'üßà', 'ƒê·∫≠u': 'üå±', 'Tr·ª©ng': 'ü•ö', 'N·∫•m': 'üçÑ', 'Ph√¥ mai Cottage': 'üßÄ',
  'S·ªØa': 'ü•õ', 'ƒê·∫≠u ph·ª•': 'üü´', 'S·ªët hummus': 'ü•£', 'S·ªØa th·ª±c v·∫≠t': 'ü•õ',
  'B·ªôt protein': 'üí™', 'B·ªôt protein thu·∫ßn chay': 'üåø',
  // Th·ªãt & C√°
  'G√† t√¢y': 'ü¶É', 'Th·ªãt b√≤': 'ü•©', 'G√†': 'üçó', 'H·∫£i s·∫£n': 'ü¶ê', 'Th·ªãt l·ª£n': 'ü•ì', 'C√°': 'üêü',
  // Tr√°i c√¢y & Qu·∫£ m·ªçng
  'Cam qu√Ωt': 'üçä', 'T√°o': 'üçè', 'L√™': 'üçê', 'Kiwi': 'ü•ù', 'Chu·ªëi': 'üçå',
  'Qu·∫£ h·ªìng': 'üü†', 'ƒê√†o': 'üçë', 'Qu·∫£ m·ªçng': 'ü´ê', 'Nho': 'üçá', 'L·ª±u': 'üçé',
  'Tr√°i c√¢y nhi·ªát ƒë·ªõi (d·ª©a, xo√†i, ƒëu ƒë·ªß, thanh long)': 'ü•≠'
};

const GROUPS = [
  {
    title: 'Rau',
    items: ['B√¥ng c·∫£i xanh', 'S√∫p l∆°', 'H√†nh', '·ªöt chu√¥ng', 'C√† t√≠m', 'B·∫Øp c·∫£i', 'MƒÉng t√¢y', 'Rau ch√¢n v·ªãt', 'Qu·∫£ d∆∞a chu·ªôt', 'C√† chua']
  },
  {
    title: 'Ng≈© c·ªëc',
    items: ['G·∫°o', 'Di√™m m·∫°ch', 'C∆°m couscous', 'Ki·ªÅu m·∫°ch', 'H·∫°t k√™', 'H·∫°t d·ªÅn', 'B·ªôt m√¨ Semolina', 'B·ªôt ng√¥', 'L√∫a m√¨ Bulgur']
  },
  {
    title: 'Nguy√™n li·ªáu',
    items: ['B∆°', 'ƒê·∫≠u', 'Tr·ª©ng', 'N·∫•m', 'Ph√¥ mai Cottage', 'S·ªØa', 'ƒê·∫≠u ph·ª•', 'S·ªët hummus', 'S·ªØa th·ª±c v·∫≠t', 'B·ªôt protein', 'B·ªôt protein thu·∫ßn chay']
  },
  {
    title: 'Th·ªãt & C√°',
    items: ['G√† t√¢y', 'Th·ªãt b√≤', 'G√†', 'H·∫£i s·∫£n', 'Th·ªãt l·ª£n', 'C√°']
  },
  {
    title: 'Tr√°i c√¢y & Qu·∫£ m·ªçng',
    items: ['Cam qu√Ωt', 'T√°o', 'L√™', 'Kiwi', 'Chu·ªëi', 'Qu·∫£ h·ªìng', 'ƒê√†o', 'Qu·∫£ m·ªçng', 'Nho', 'L·ª±u', 'Tr√°i c√¢y nhi·ªát ƒë·ªõi (d·ª©a, xo√†i, ƒëu ƒë·ªß, thanh long)']
  }
];

const STORAGE_KEY = 'foodPreferences';
const AUTO_KEY = 'autoChooseFood';

export default function Step35Preference({ formData, go, currentStep }) {
  const [selected, setSelected] = useState(() => {
    return formData?.foodPreferences ||
      JSON.parse(localStorage.getItem(STORAGE_KEY)) || {};
  });
  const [auto, setAuto] = useState(() => {
    return formData?.autoChooseFood === true ||
      localStorage.getItem(AUTO_KEY) === 'true';
  });

  useEffect(() => {
    // N·∫øu c√≥ d·ªØ li·ªáu formData => sync l·∫°i local
    if (formData?.foodPreferences) {
      setSelected(formData.foodPreferences);
      localStorage.setItem(STORAGE_KEY, JSON.stringify(formData.foodPreferences));
    }
    if (formData?.autoChooseFood !== undefined) {
      setAuto(formData.autoChooseFood);
      localStorage.setItem(AUTO_KEY, formData.autoChooseFood ? 'true' : 'false');
    }
    // eslint-disable-next-line
  }, [formData]);

  // N·∫øu b·∫≠t auto -> ch·ªçn h·∫øt
 useEffect(() => {
  if (auto) {
    // B·∫≠t auto: ch·ªçn t·∫•t c·∫£
    const all = {};
    GROUPS.forEach(g => {
      all[g.title] = g.items.slice();
    });
    setSelected(all);
    localStorage.setItem(STORAGE_KEY, JSON.stringify(all));
    localStorage.setItem(AUTO_KEY, 'true');
  } else {
    // T·∫Øt auto: b·ªè ch·ªçn h·∫øt
    setSelected({});
    localStorage.setItem(STORAGE_KEY, JSON.stringify({}));
    localStorage.setItem(AUTO_KEY, 'false');
  }
}, [auto]);
  const toggleItem = (group, item) => {
    if (auto) return; // Kh√¥ng cho ch·ªçn khi auto b·∫≠t
    setSelected(prev => {
      const groupItems = prev[group] || [];
      const exist = groupItems.includes(item);
      const updated = exist
        ? groupItems.filter(i => i !== item)
        : [...groupItems, item];
      const result = { ...prev, [group]: updated };
      localStorage.setItem(STORAGE_KEY, JSON.stringify(result));
      return result;
    });
  };

  const handleContinue = () => {
    go(`step${currentStep + 1}`, {
      ...formData,
      foodPreferences: selected,
      autoChooseFood: auto
    });
  };

  return (
    <div className="step35-root">
      <h2 className="step35-title">Ch·ªçn c√°c s·∫£n ph·∫©m b·∫°n th√≠ch</h2>
      <div className="step35-desc">
        H√£y ƒë·ªÉ ch√∫ng t√¥i t·∫°o ra m·ªôt k·∫ø ho·∫°ch ƒÉn d·ª±a tr√™n s·ªü th√≠ch c·ªßa b·∫°n.<br />
        B·∫°n lu√¥n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch ƒÉn sau n√†y.
      </div>
      <div className="step35-auto-row">
        <span className="step35-auto-label">H√£y ƒë·ªÉ Fitness & Health l·ª±a ch·ªçn</span>
        <label className="step35-switch">
          <input
            type="checkbox"
            checked={auto}
            onChange={e => setAuto(e.target.checked)}
          />
          <span className="step35-slider"></span>
        </label>
      </div>
      <div className="step35-groups">
        {GROUPS.map(group => (
          <div className="step35-group" key={group.title}>
            <div className="step35-group-title">{group.title}</div>
            <div className="step35-tags">
              {group.items.map(item => (
                <div
                  key={item}
                  className={
                    "step35-tag" +
                    (selected[group.title]?.includes(item) ? " selected" : "") +
                    (auto ? " auto" : "")
                  }
                  onClick={() => toggleItem(group.title, item)}
                  tabIndex={0}
                >
                  <span className="step35-icon">{FOOD_ICONS[item] || 'üçΩÔ∏è'}</span>
                  <span>{item}</span>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
      <button className="step35-btn" onClick={handleContinue}>
        Ti·∫øp t·ª•c
      </button>
    </div>
  );
}
