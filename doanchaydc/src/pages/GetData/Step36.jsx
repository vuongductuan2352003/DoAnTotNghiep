// src/pages/Step36Summary.jsx
import React, { useEffect } from "react";
import { motion } from "framer-motion";
import images from "../../assets/loadImg.js";
import "../../styles/Step36.css";
import { useOutletContext } from "react-router-dom";

const WATER_LITERS_MAP = {
  "√çt h∆°n 2 c·ªëc": 0.5,
  "2-6 c·ªëc": 1.0,
  "7-10 c·ªëc": 2.0,
  "H∆°n 10 c·ªëc": 2.7,
  "T√¥i ch·ªâ u·ªëng c√† ph√™ ho·∫∑c tr√†": 0,
  "Tr√™n 2,5 l√≠t": 2.7,
  "2 l√≠t": 2,
  "1 l√≠t": 1,
};

export default function Step36Summary() {
   useEffect(() => {
    window.scrollTo({ top: 0, behavior: "smooth" }); // ho·∫∑c "auto" n·∫øu mu·ªën nhanh
  }, []);
  const { formData, go } = useOutletContext();

  const {
    fullName,
    metrics = {},
    bodyFatPercent,
    fitnessLevel,
    goal,
    calories,
    water,
    duration,
    location,
    trainingFrequency,
    extraGoals = [],
  } = formData;

  // Chu·∫©n h√≥a gi√° tr·ªã
  const bmi = metrics.bmi ?? "";
  const fatPercent = bodyFatPercent ?? metrics.body_fat_pct ?? "";
  const caloriesVal = calories || metrics.tdee || "";
  function getWaterLiters(val) {
    if (val == null) return 0;
    if (typeof val === "number") return val;
    if (typeof val === "string") {
      if (!isNaN(Number(val))) return Number(val);
      const fixed = val.replace(",", ".");
      if (!isNaN(Number(fixed))) return Number(fixed);
      if (WATER_LITERS_MAP[val]) return WATER_LITERS_MAP[val];
    }
    return 0;
  }
  const waterLiters = getWaterLiters(water);

  // ·∫¢nh before/after (replace link/your file path)
  const beforeImg = images["male1.png"] || "cb.png";
  const afterImg  = images["cb.png"] || "/after.png";

  // M·ª•c ti√™u ph·ª•
  const extraGoalsShow =
    Array.isArray(extraGoals) && extraGoals.length
      ? extraGoals
      : [
          "Gi·∫£m cƒÉng th·∫≥ng",
          "C·∫£i thi·ªán gi·∫•c ng·ªß",
          "T·ª± k·ª∑ lu·∫≠t",
          "C·∫£m th·∫•y kh·ªèe m·∫°nh h∆°n",
          "H√¨nh th√†nh th√≥i quen th·ªÉ ch·∫•t"
        ];

  // Th√¥ng tin th·ªÉ h√¨nh m√¥ ph·ªèng
  const nowFat = parseFloat(fatPercent) || 22;
  const targetFat = nowFat > 10 ? (nowFat > 16 ? 8 : 10) : 8;
  const nowMuscle = fitnessLevel === "Cao c·∫•p" ? 5 : fitnessLevel === "Trung c·∫•p" ? 3 : 2;
  const targetMuscle = Math.min(5, nowMuscle + 2);

  const handleRegister = () => go("/register", formData);

  return (
    <motion.div
      className="step36new-root"
      initial={{ opacity: 0, y: 60 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.7, ease: "easeOut" }}
    >
      {/* V√πng Before-After */}
      <motion.div className="step36new-compare" initial={{ opacity: 0, y: 40 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }}>
        <div className="step36new-col">
          <img src={beforeImg} alt="before" className="step36new-avatar" />
          <div className="step36new-label step36new-label-now">B√¢y gi·ªù</div>
          <div className="step36new-info-box">
            <div className="step36new-fat">M·ª° c∆° th·ªÉ<br/><b>{nowFat}%</b></div>
            <div className="step36new-muscle">
              C∆° b·∫Øp c∆° th·ªÉ <span>
                {[...Array(nowMuscle)].map((_, i) =>
                  <i key={i} className="step36new-muscle-bar"></i>
                )}
              </span>
            </div>
          </div>
        </div>
        <div className="step36new-arrows">
          <motion.span animate={{ opacity: [0.7, 1, 0.7] }} transition={{ repeat: Infinity, duration: 1.7 }}>
            <svg width="120" height="44"><polyline points="30,22 60,22 50,8" fill="none" stroke="#666" strokeWidth="7" /><polyline points="60,22 90,22 80,36" fill="none" stroke="#666" strokeWidth="7" /></svg>
          </motion.span>
        </div>
        <div className="step36new-col">
          <img src={afterImg} alt="after" className="step36new-avatar" />
          <div className="step36new-label step36new-label-after">6 th√°ng</div>
          <div className="step36new-info-box">
            <div className="step36new-fat orange">M·ª° c∆° th·ªÉ<br/><b>{targetFat}%</b></div>
            <div className="step36new-muscle">
              C∆° b·∫Øp c∆° th·ªÉ <span>
                {[...Array(targetMuscle)].map((_, i) =>
                  <i key={i} className="step36new-muscle-bar active"></i>
                )}
              </span>
            </div>
          </div>
        </div>
      </motion.div>
      <div className="step36new-note">
        *H√¨nh ·∫£nh kh√¥ng nh·∫±m m·ª•c ƒë√≠ch ƒë·∫°i di·ªán cho ng∆∞·ªùi d√πng. M·ªói ng∆∞·ªùi s·∫Ω c√≥ k·∫øt qu·∫£ kh√°c nhau v√† kh√¥ng ƒë∆∞·ª£c ƒë·∫£m b·∫£o.
      </div>

      {/* Ti√™u ƒë·ªÅ t·ªïng k·∫øt */}
      <motion.h1 className="step36new-title" initial={{ opacity: 0, y: 25 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.18 }}>
        T√≥m t·∫Øt c√° nh√¢n d·ª±a tr√™n c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n
      </motion.h1>

      {/* Th√¥ng tin health */}
      <div className="step36new-summarywrap">
        <motion.div className="step36new-bmi-box" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.27 }}>
          <div className="step36new-bmi-title">Ch·ªâ s·ªë BMI hi·ªán t·∫°i</div>
          <div className="step36new-bmi-val">{bmi ? Number(bmi).toFixed(2) : "--"} BMI</div>
          <div className="step36new-bmi-bar-bg">
            <div className="step36new-bmi-bar-gradient">
              <div
                className="step36new-bmi-dot"
                style={{ left: `${Math.max(0, Math.min(1, (bmi - 14) / 18)) * 100}%` }}
              />
            </div>
            <div className="step36new-bmi-labels">
              <span>Thi·∫øu c√¢n</span>
              <span>B√©o ph√¨</span>
            </div>
          </div>
          <div className="step36new-bmi-desc">
            {bmi < 18.5 ? (
              <span className="orange">Thi·∫øu c√¢n</span>
            ) : bmi < 23 ? (
              <span className="green">B√¨nh th∆∞·ªùng</span>
            ) : bmi < 25 ? (
              <span className="orange">Th·ª´a c√¢n</span>
            ) : (
              <span className="red">B√©o ph√¨</span>
            )}
            <div className="desc">
              Ch·ªâ s·ªë BMI (Body Mass Index) gi√∫p ƒë√°nh gi√° s·ª©c kh·ªèe d·ª±a tr√™n chi·ªÅu cao v√† c√¢n n·∫∑ng c·ªßa b·∫°n.
            </div>
          </div>
        </motion.div>

        <div className="step36new-infogrid">
          <motion.div className="step36new-info-card" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.32 }}>
            <div className="step36new-info-title">L∆∞·ª£ng calo h√†ng ng√†y</div>
            <div className="step36new-info-value">{caloriesVal ? caloriesVal + " kcal" : "--"}</div>
            <div className="step36new-info-progress-bg">
              <div className="step36new-info-progress" style={{ width: `${Math.max(0, Math.min(1, (caloriesVal - 1000) / 3000)) * 100}%` }} />
            </div>
          </motion.div>
          <motion.div className="step36new-info-card" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.36 }}>
            <div className="step36new-info-title">L∆∞·ª£ng n∆∞·ªõc/ng√†y</div>
            <div className="step36new-info-value">{waterLiters ? waterLiters + " l" : "--"}</div>
            <div className="step36new-info-water">
              {[...Array(7)].map((_, i) => (
                <span key={i} className={i < Math.round(waterLiters / 0.35) ? "glass full" : "glass"}>ü•§</span>
              ))}
            </div>
          </motion.div>
        </div>
      </div>

      {/* Th√¥ng tin k·∫ø ho·∫°ch v√† m·ª•c ti√™u */}
      <div className="step36new-plan-section">
        <div className="step36new-plan-title">
          K·∫ø ho·∫°ch ƒë∆∞·ª£c c√° nh√¢n h√≥a d√†nh cho <b>{fullName || "b·∫°n"}</b> ƒë√£ s·∫µn s√†ng!
        </div>
        <div className="step36new-plan-grid">
          <div className="step36new-plan-item">
            <span>‚è±Ô∏è Th·ªùi gian t·∫≠p luy·ªán</span>
            <b>{duration || "--"}</b>
          </div>
          <div className="step36new-plan-item">
            <span>üí™ C·∫•p ƒë·ªô th·ªÉ h√¨nh</span>
            <b>{fitnessLevel || "--"}</b>
          </div>
          <div className="step36new-plan-item">
            <span>üè† N∆°i t·∫≠p luy·ªán</span>
            <b>{location || "Nh√†"}</b>
          </div>
          <div className="step36new-plan-item">
            <span>üìÖ C∆∞·ªùng ƒë·ªô</span>
            <b>{trainingFrequency || "--"}</b>
          </div>
        </div>
      </div>

      <div className="step36new-goals">
        <div className="step36new-goals-title">M·ª•c ti√™u ch∆∞∆°ng tr√¨nh c·ªßa b·∫°n c≈©ng bao g·ªìm:</div>
        <ul className="step36new-goals-list">
          {extraGoalsShow.filter(Boolean).map((g, i) =>
            <li key={i}><span>‚úîÔ∏è</span> {g}</li>
          )}
        </ul>
      </div>

      <motion.button className="step36new-btn" whileTap={{ scale: 0.97 }} onClick={handleRegister}>
        ƒêƒÉng k√Ω ngay
      </motion.button>
    </motion.div>
  );
}
