import React, { useState, useEffect, useRef } from 'react';
import { useOutletContext } from 'react-router-dom';
import '../../styles/Step33.css';

const OPTIONS = [
  { value: 'lt5', label: '√çt h∆°n 5 gi·ªù' },
  { value: '5_6', label: '5-6 gi·ªù üò™' },
  { value: '7_8', label: '7-8 gi·ªù üåô' },
  { value: 'gt8', label: 'H∆°n 8 gi·ªù üò¥' },
];

const RECOMMEND = {
  lt5: {
    title: 'B·∫°n ƒëang thi·∫øu ng·ªß!',
    msg: 'Ng·ªß d∆∞·ªõi 5 ti·∫øng m·ªói ƒë√™m s·∫Ω g√¢y h·∫°i nghi√™m tr·ªçng cho s·ª©c kh·ªèe v√† hi·ªáu qu·∫£ t·∫≠p luy·ªán. H√£y c·ªë g·∫Øng ng·ªß ƒë·ªß 7-8 gi·ªù m·ªói ng√†y ƒë·ªÉ ph·ª•c h·ªìi c∆° th·ªÉ t·ªët h∆°n.',
  },
  '5_6': {
    title: 'B·∫°n ng·ªß ch∆∞a ƒë·ªß!',
    msg: '5-6 gi·ªù/ng√†y v·∫´n ch∆∞a ƒë·ªß cho c∆° th·ªÉ h·ªìi ph·ª•c v√† ph√°t tri·ªÉn. H√£y s·∫Øp x·∫øp th·ªùi gian ƒë·ªÉ ng·ªß ƒë·ªß t·ª´ 7-8 gi·ªù/ng√†y gi√∫p tƒÉng s·ª©c kh·ªèe, hi·ªáu qu·∫£ h·ªçc t·∫≠p v√† t·∫≠p luy·ªán.',
  },
  '7_8': {
    title: 'Tuy·ªát v·ªùi!',
    msg: 'B·∫°n ng·ªß ƒë·ªß 7-8 gi·ªù/ng√†y ‚Äì ƒë√¢y l√† m·ª©c l√Ω t∆∞·ªüng gi√∫p c∆° th·ªÉ ph·ª•c h·ªìi v√† ph√°t tri·ªÉn t·ªët. Ti·∫øp t·ª•c duy tr√¨ th√≥i quen n√†y nh√©!',
  },
  gt8: {
    title: 'R·∫•t t·ªët!',
    msg: 'B·∫°n ƒëang ng·ªß nhi·ªÅu h∆°n 8 gi·ªù/ng√†y. ƒêi·ªÅu n√†y r·∫•t t·ªët, nh∆∞ng n·∫øu ng·ªß qu√° nhi·ªÅu m√† v·∫´n m·ªát m·ªèi, h√£y ki·ªÉm tra ch·∫•t l∆∞·ª£ng gi·∫•c ng·ªß v√† sinh ho·∫°t nh√©!',
  },
};

export default function Step33Sleep() {
  const { formData, go, currentStep } = useOutletContext();
  const [selected, setSelected] = useState(() => {
    return formData.sleep || localStorage.getItem('sleep') || '';
  });
  const [showPopup, setShowPopup] = useState(false);

  // T·∫°o ref cho box popup
  const popupRef = useRef(null);

  const handleChoose = (value) => {
    setSelected(value);
    localStorage.setItem('sleep', value);
    setShowPopup(false); // N·∫øu ch·ªçn l·∫°i, ·∫©n popup khuy·∫øn ngh·ªã
  };

  useEffect(() => {
    if (formData.sleep) {
      setSelected(formData.sleep);
      localStorage.setItem('sleep', formData.sleep);
    }
    // eslint-disable-next-line
  }, [formData.sleep]);

  // Auto scroll t·ªõi popup khi hi·ªán ra
  useEffect(() => {
    if (showPopup && popupRef.current) {
      popupRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  }, [showPopup]);

  const handleContinue = () => {
    // N·∫øu ch∆∞a show popup th√¨ show popup
    if (!showPopup && selected) {
      setShowPopup(true);
    } else if (showPopup && selected) {
      // N·∫øu ƒë√£ show popup r·ªìi th√¨ sang step ti·∫øp
      go(`step${currentStep + 1}`, { ...formData, sleep: selected });
    }
  };

  return (
    <div className="step33-root">
      <h2 className="step33-title animate-fadein">B·∫°n th∆∞·ªùng ng·ªß ƒë∆∞·ª£c bao l√¢u?</h2>
      <div className="step33-options">
        {OPTIONS.map((option) => (
          <div
            key={option.value}
            className={`step33-option${selected === option.value ? ' selected' : ''}`}
            onClick={() => handleChoose(option.value)}
          >
            <span className="step33-label">{option.label}</span>
            <span className="step33-check">{selected === option.value && '‚úî'}</span>
          </div>
        ))}
      </div>
      {/* Hi·ªán popup khuy·∫øn ngh·ªã */}
      {showPopup && selected && (
        <div className="step33-popup animate-fadein" ref={popupRef}>
          <div className="step33-popup-title">{RECOMMEND[selected].title}</div>
          <div className="step33-popup-desc">{RECOMMEND[selected].msg}</div>
        </div>
      )}
      <button
        className="step33-btn"
        onClick={handleContinue}
        disabled={!selected}
      >
        {showPopup ?  'ƒê√£ hi·ªÉu': 'Ti·∫øp t·ª•c ‚Üí'}
      </button>
    </div>
  );
}
