import React from 'react';
import { useOutletContext } from 'react-router-dom';
import {
  FaRegSadCry, FaCalendarAlt, FaRunning,
  FaHeartbeat, FaExclamationCircle
} from 'react-icons/fa';
import '../../styles/Step26.css';

const PROBLEMS = [
  { value: 'motivation',   label: 'Thi·∫øu ƒë·ªông l·ª±c',                icon: <FaRegSadCry /> },
  { value: 'plan',         label: 'Kh√¥ng c√≥ k·∫ø ho·∫°ch r√µ r√†ng',     icon: <FaCalendarAlt /> },
  { value: 'too_hard',     label: 'Vi·ªác t·∫≠p luy·ªán c·ªßa t√¥i qu√° v·∫•t v·∫£', icon: <FaRunning /> },
  { value: 'bad_trainer',  label: 'Hu·∫•n luy·ªán t·ªá',                 icon: <FaExclamationCircle /> },
  { value: 'cholesterol',  label: 'Cholesterol cao',               icon: <FaHeartbeat /> },
];

const NONE = 'None'; // ƒë√∫ng quy ∆∞·ªõc ƒë·ªìng b·ªô

// H√†m l·∫•y label theo value
const getLabel = (value) => {
  const found = PROBLEMS.find(p => p.value === value);
  if (!found) return '';
  return found.label.charAt(0).toUpperCase() + found.label.slice(1);
};

export default function Step26Problems() {
  const { formData, go, currentStep } = useOutletContext();

  // N·∫øu quay l·∫°i: lu√¥n map t·ª´ value sang label, n·∫øu tr·ªëng ho·∫∑c none th√¨ selected l√† [NONE]
  const [selected, setSelected] = React.useState(() => {
    const arr = Array.isArray(formData.problems) ? formData.problems : [];
    if (!arr.length || arr[0] === NONE) return [NONE];
    return arr.map(l => l.charAt(0).toUpperCase() + l.slice(1));
  });
  const [showThanks, setShowThanks] = React.useState(false);

  // Toggle l·ª±a ch·ªçn
  const handleToggle = (value) => {
    if (value === NONE) {
      setSelected([NONE]);
      return;
    }
    const label = getLabel(value);
    if (!label) return;
    let newSelected;
    if (selected.includes(NONE)) {
      newSelected = [label];
    } else if (selected.includes(label)) {
      newSelected = selected.filter(l => l !== label);
      if (newSelected.length === 0) newSelected = [NONE];
    } else {
      newSelected = [...selected, label];
    }
    setSelected(newSelected);
  };

  // Ti·∫øp t·ª•c
  const handleContinue = () => {
    if (selected.includes(NONE)) {
      go(`step${currentStep + 1}`, { ...formData, problems: [NONE] });
    } else if (selected.length) {
      setShowThanks(true);
    }
  };

  // ƒê√£ hi·ªÉu
  const handleThanksClose = () => {
    setShowThanks(false);
    go(`step${currentStep + 1}`, { ...formData, problems: selected });
  };

  return (
    <div className="step26-root">
      <h2 className="step26-title">
        Trong nh·ªØng v·∫•n ƒë·ªÅ n√†y, b·∫°n c√≥ g·∫∑p ph·∫£i v·∫•n ƒë·ªÅ n√†o khi t·∫≠p th·ªÉ d·ª•c tr∆∞·ªõc ƒë√¢y kh√¥ng?
      </h2>
      <div className="step26-options-list">
        {PROBLEMS.map((problem) => {
          const label = problem.label.charAt(0).toUpperCase() + problem.label.slice(1);
          return (
            <div
              key={problem.value}
              className={`step26-option-row${selected.includes(label) ? ' selected' : ''}`}
              onClick={() => handleToggle(problem.value)}
            >
              <span className="step26-icon">{problem.icon}</span>
              <span className="step26-label">{label}</span>
              <span className="step26-checkbox">
                <input type="checkbox" checked={selected.includes(label)} readOnly />
                <span className="step26-tickbox">{selected.includes(label) && <span>‚úî</span>}</span>
              </span>
            </div>
          );
        })}
        <div
          className={`step26-option-row none${selected.includes(NONE) ? ' selected' : ''}`}
          onClick={() => handleToggle(NONE)}
        >
          <span className="step26-label">Kh√¥ng, t√¥i ch∆∞a t·ª´ng</span>
          <span className="step26-checkbox">
            <input type="checkbox" checked={selected.includes(NONE)} readOnly />
            <span className="step26-tickbox">
              {selected.includes(NONE) && <span>‚úï</span>}
            </span>
          </span>
        </div>
      </div>
      <button
        className="step26-btn"
        onClick={handleContinue}
        disabled={!selected.length}
      >
        Ti·∫øp t·ª•c
      </button>

      {showThanks && (
        <div className="step26-popup">
          <div className="step26-popup-inner">
            <div className="step26-popup-title">üí° C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª!</div>
            <div className="step26-popup-desc">
              Ch√∫ng t√¥i r√∫t ra r·∫±ng r·∫•t nhi·ªÅu ng∆∞·ªùi g·∫∑p ph·∫£i nh·ªØng tr·ªü ng·∫°i t∆∞∆°ng t·ª±.
              ·ª®ng d·ª•ng s·∫Ω gi√∫p b·∫°n l√™n k·∫ø ho·∫°ch r√µ r√†ng v√† th·ª±c hi·ªán d·ªÖ d√†ng h∆°n.
              Ch√∫ng t√¥i c≈©ng s·∫Ω c·ªï v≈©, ƒë·ªông vi√™n b·∫°n trong su·ªët qu√° tr√¨nh n√†y.
            </div>
            <button className="step26-btn-confirm" onClick={handleThanksClose}>
              ƒê√£ hi·ªÉu
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
