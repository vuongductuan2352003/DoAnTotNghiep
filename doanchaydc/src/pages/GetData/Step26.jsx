import React, { useState } from 'react';
import { useOutletContext } from 'react-router-dom';
import { FaRegSadCry, FaCalendarAlt, FaRunning, FaHeartbeat, FaExclamationCircle } from 'react-icons/fa';
import '../../styles/Step26.css';

const PROBLEMS = [
  { value: 'motivation', label: 'Thi·∫øu ƒë·ªông l·ª±c', icon: <FaRegSadCry /> },
  { value: 'plan', label: 'Kh√¥ng c√≥ k·∫ø ho·∫°ch r√µ r√†ng', icon: <FaCalendarAlt /> },
  { value: 'too_hard', label: 'Vi·ªác t·∫≠p luy·ªán c·ªßa t√¥i qu√° v·∫•t v·∫£', icon: <FaRunning /> },
  { value: 'bad_trainer', label: 'Hu·∫•n luy·ªán t·ªá', icon: <FaExclamationCircle /> },
  { value: 'cholesterol', label: 'Cholesterol cao', icon: <FaHeartbeat /> },
];

export default function Step26Problems() {
  const { formData, go, currentStep } = useOutletContext();
  const [selected, setSelected] = useState(formData.problems || []);
  const [showThanks, setShowThanks] = useState(false);

  // Ch·ªçn ho·∫∑c b·ªè ch·ªçn m·ªôt v·∫•n ƒë·ªÅ
  const handleToggle = (value) => {
    if (value === 'none') {
      setSelected(['none']);
    } else {
      let newSelected = selected.includes(value)
        ? selected.filter((v) => v !== value)
        : [...selected.filter((v) => v !== 'none'), value];
      setSelected(newSelected);
    }
  };

  // N·∫øu v·ª´a ch·ªçn "Kh√¥ng, t√¥i ch∆∞a t·ª´ng" r·ªìi click l·∫°i m·ª•c kh√°c th√¨ b·ªè ch·ªçn "none"
  React.useEffect(() => {
    if (selected.length > 1 && selected.includes('none')) {
      setSelected(selected.filter((v) => v !== 'none'));
    }
  }, [selected]);

  // Ti·∫øp t·ª•c
  const handleContinue = () => {
    if (selected.length === 1 && selected[0] === 'none') {
      go(`step${currentStep + 1}`, { ...formData, problems: [] });
    } else if (selected.length) {
      setShowThanks(true);
    }
  };

  // ƒê√£ hi·ªÉu
  const handleThanksClose = () => {
    setShowThanks(false);
    go(`step${currentStep + 1}`, { ...formData, problems: selected });
  };

  return (
    <div className="step26-root">
      <h2 className="step26-title">
        Trong nh·ªØng v·∫•n ƒë·ªÅ n√†y, b·∫°n c√≥ g·∫∑p ph·∫£i v·∫•n ƒë·ªÅ n√†o khi t·∫≠p th·ªÉ d·ª•c tr∆∞·ªõc ƒë√¢y kh√¥ng?
      </h2>
      <div className="step26-options-list">
        {PROBLEMS.map((problem) => (
          <div
            key={problem.value}
            className={`step26-option-row${selected.includes(problem.value) ? ' selected' : ''}`}
            onClick={() => handleToggle(problem.value)}
          >
            <span className="step26-icon">{problem.icon}</span>
            <span className="step26-label">{problem.label}</span>
            <span className="step26-checkbox">
              <input type="checkbox" checked={selected.includes(problem.value)} readOnly />
              <span className="step26-tickbox">{selected.includes(problem.value) && <span>‚úî</span>}</span>
            </span>
          </div>
        ))}
        <div
          className={`step26-option-row none${selected.includes('none') ? ' selected' : ''}`}
          onClick={() => handleToggle('none')}
        >
          <span className="step26-label">Kh√¥ng, t√¥i ch∆∞a t·ª´ng</span>
          <span className="step26-checkbox">
            <input type="checkbox" checked={selected.includes('none')} readOnly />
            <span className="step26-tickbox">
              {selected.includes('none') && <span>‚úï</span>}
            </span>
          </span>
        </div>
      </div>
      <button
        className="step26-btn"
        onClick={handleContinue}
        disabled={!selected.length}
      >
        Ti·∫øp t·ª•c
      </button>

      {showThanks && (
        <div className="step26-popup">
          <div className="step26-popup-inner">
            <div className="step26-popup-title">üí° C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª!</div>
            <div className="step26-popup-desc">
              Ch√∫ng t√¥i r√∫t ra r·∫±ng r·∫•t nhi·ªÅu ng∆∞·ªùi g·∫∑p ph·∫£i nh·ªØng tr·ªü ng·∫°i t∆∞∆°ng t·ª±. 
              ·ª®ng d·ª•ng s·∫Ω gi√∫p b·∫°n l√™n k·∫ø ho·∫°ch r√µ r√†ng v√† th·ª±c hi·ªán d·ªÖ d√†ng h∆°n.
              Ch√∫ng t√¥i c≈©ng s·∫Ω c·ªï v≈©, ƒë·ªông vi√™n b·∫°n trong su·ªët qu√° tr√¨nh n√†y.
            </div>
            <button className="step26-btn-confirm" onClick={handleThanksClose}>
              ƒê√£ hi·ªÉu
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
