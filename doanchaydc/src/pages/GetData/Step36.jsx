import React from "react";
import { motion } from "framer-motion";
import images from "../../assets/loadImg.js";
import "../../styles/Step36.css";
import { useOutletContext } from "react-router-dom";

// Map chu·ªói ti·∫øng Vi·ªát sang s·ªë l√≠t
const WATER_LITERS_MAP = {
  "√çt h∆°n 2 c·ªëc": 0.5,
  "2-6 c·ªëc": 1.0,
  "7-10 c·ªëc": 2.0,
  "H∆°n 10 c·ªëc": 2.7,
  "T√¥i ch·ªâ u·ªëng c√† ph√™ ho·∫∑c tr√†": 0,
  // C√≥ th·ªÉ th√™m case ƒë·∫∑c bi·ªát n·∫øu c√≥
};

export default function Step36Summary() {
  // L·∫•y d·ªØ li·ªáu
  const { formData, go } = useOutletContext();
  const {
    fullName,
    gender = "male",
    bmi,
    age,
    weight,
    height,
    bodyFatPercent,
    fitnessLevel,
    goal,
    calories,
    water,
    timePreference,
  duration,
    workoutFrequency,
    location,
    extraGoals = [],
  } = formData;

  // T√≠nh to√°n cho ph·∫ßn m√¥ ph·ªèng body
  const nowFat = bodyFatPercent || 20;
  const nowAge = age || 27;
  const nowMuscle = fitnessLevel === "advanced" ? 3 : fitnessLevel === "intermediate" ? 2 : 1;
  const targetFat = nowFat > 10 ? (nowFat > 16 ? 8 : 10) : 8;
  const targetAge = Math.max(18, nowAge - 7);
  const targetMuscle = Math.min(3, nowMuscle + 1);

  const beforeImg = gender === "female" ? images["female_before.png"] : images["male_before.png"];
  const afterImg  = gender === "female" ? images["female_after.png"]  : images["male_after.png"];

  const goalMap = {
    lose_weight: "Gi·∫£m c√¢n",
    reduce_fat: "Gi·∫£m m·ª°",
    maintain: "Duy tr√¨ c√¢n n·∫∑ng",
    gain_muscle: "TƒÉng c∆°",
    gain_weight: "TƒÉng c√¢n"
  };

  const extraGoalsShow = extraGoals.length
    ? extraGoals
    : ["Gi·∫£m cƒÉng th·∫≥ng", "C·∫£i thi·ªán gi·∫•c ng·ªß", "T·ª± k·ª∑ lu·∫≠t", "C·∫£m th·∫•y kh·ªèe m·∫°nh h∆°n", "H√¨nh th√†nh th√≥i quen th·ªÉ ch·∫•t"];

  // H√†m chuy·ªÉn gi√° tr·ªã water sang s·ªë l√≠t chu·∫©n ƒë·ªÉ hi·ªÉn th·ªã
  function getWaterLiters(val) {
    if (val == null) return 0;
    if (typeof val === "number") return val;
    if (typeof val === "string") {
      // N·∫øu l√† s·ªë, tr·∫£ v·ªÅ lu√¥n
      if (!isNaN(Number(val))) return Number(val);
      // N·∫øu l√† chu·ªói ki·ªÉu "1,5" ho·∫∑c "2.7", thay d·∫•u ph·∫©y n·∫øu c√≥
      const fixed = val.replace(",", ".");
      if (!isNaN(Number(fixed))) return Number(fixed);
      // N·∫øu l√† label th√¨ tra c·ª©u map
      if (WATER_LITERS_MAP[val]) return WATER_LITERS_MAP[val];
    }
    return 0;
  }

  const waterLiters = getWaterLiters(water);

  const handleRegister = () => go("/register", formData);

  return (
    <motion.div
      className="step36sum-root"
      initial={{ opacity: 0, y: 60 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.7, ease: "easeOut" }}
    >
      {/* Kh·ªëi m√¥ ph·ªèng thay ƒë·ªïi body */}
      <motion.div className="step36sum-bodychange" initial={{ opacity: 0, y: 30 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.15 }}>
        <div className="step36sum-bodybox">
          <img src={beforeImg} alt="before" className="step36sum-bodyimg" />
          <div className="step36sum-bodystats">
            <div className="step36sum-bodytitle">B√¢y gi·ªù</div>
            <div>M·ª° c∆° th·ªÉ <b className="step36sum-fat">{nowFat}%</b></div>
            <div>ƒê·ªô tu·ªïi th·ªÉ ch·∫•t <b className="step36sum-age">{nowAge}</b></div>
            <div>
              C∆° b·∫Øp c∆° th·ªÉ{" "}
              {[...Array(nowMuscle)].map((_, i) => (
                <span key={i} className="step36sum-muscle">üüß</span>
              ))}
            </div>
          </div>
        </div>
        <div className="step36sum-arrows">{/* M≈©i t√™n */} <span>&#62;&#62;</span></div>
        <div className="step36sum-bodybox">
          <img src={afterImg} alt="after" className="step36sum-bodyimg" />
          <div className="step36sum-bodystats">
            <div className="step36sum-bodytitle">6 th√°ng</div>
            <div>M·ª° c∆° th·ªÉ <b className="step36sum-fat orange">{targetFat}%</b></div>
            <div>ƒê·ªô tu·ªïi th·ªÉ ch·∫•t <b className="step36sum-age orange">{targetAge}</b></div>
            <div>
              C∆° b·∫Øp c∆° th·ªÉ{" "}
              {[...Array(targetMuscle)].map((_, i) => (
                <span key={i} className="step36sum-muscle">üüß</span>
              ))}
            </div>
          </div>
        </div>
      </motion.div>

      {/* Ti√™u ƒë·ªÅ t·ªïng k·∫øt */}
      <h1 className="step36sum-mainTitle">T√≥m t·∫Øt c√° nh√¢n d·ª±a tr√™n c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n</h1>

      {/* Kh·ªëi BMI + Calories + N∆∞·ªõc */}
      <div className="step36sum-summarybox">
        <div className="step36sum-bmi">
          <div className="step36sum-bmititle">Ch·ªâ s·ªë BMI hi·ªán t·∫°i</div>
          <div className="step36sum-bminum">
            {bmi ? Number(bmi).toFixed(2) : "--"} BMI
          </div>
          <div className="step36sum-bmi-bar-wrap">
            <div className="step36sum-bmi-bar">
              {/* Gi·∫£ s·ª≠: thi·∫øu c√¢n <18.5, b√¨nh th∆∞·ªùng 18.5-23, th·ª´a 23-25, b√©o >25 */}
              <div className="bmi-segment under"></div>
              <div className="bmi-segment normal"></div>
              <div className="bmi-segment over"></div>
              <div className="bmi-segment obese"></div>
              <div
                className="bmi-indicator"
                style={{
                  left: `${Math.max(0, Math.min(1, (bmi - 14) / 18)) * 100}%`
                }}
              />
            </div>
            <div className="step36sum-bmi-labels">
              <span>Thi·∫øu c√¢n</span>
              <span>B√©o ph√¨</span>
            </div>
          </div>
          <div className="step36sum-bmi-desc">
            {bmi < 18.5 ? (
              <span className="orange">Thi·∫øu c√¢n</span>
            ) : bmi < 23 ? (
              <span className="green">B√¨nh th∆∞·ªùng</span>
            ) : bmi < 25 ? (
              <span className="orange">Th·ª´a c√¢n</span>
            ) : (
              <span className="red">B√©o ph√¨</span>
            )}
            <br />
            <span className="desc">
              Ch·ªâ s·ªë kh·ªëi c∆° th·ªÉ (BMI) l√† ch·ªâ s·ªë s·ª≠ d·ª•ng chi·ªÅu cao v√† c√¢n n·∫∑ng ƒë·ªÉ ƒë√°nh gi√° s·ª©c kh·ªèe t·ªïng th·ªÉ.
            </span>
          </div>
        </div>

        <div className="step36sum-miniwrap">
          <div className="step36sum-calbox">
            <div className="step36sum-minititle">L∆∞·ª£ng calo h√†ng ng√†y</div>
            <div className="step36sum-calnum">{calories ? calories + " kcal" : "--"}</div>
            <div className="step36sum-mini-bar">
              <div className="step36sum-mini-barfill" style={{ width: `${Math.max(0, Math.min(1, (calories - 1000) / 4000)) * 100}%` }} />
            </div>
          </div>
          <div className="step36sum-waterbox">
            <div className="step36sum-minititle">L∆∞·ª£ng n∆∞·ªõc u·ªëng/ng√†y</div>
            <div className="step36sum-waternum">{water ? water + " l" : "--"}</div>
            <div className="step36sum-water-glasswrap">
              {[...Array(7)].map((_, i) => (
                <span key={i} className={i < Math.round(10 / 0.35) ? "glass full" : "glass"}>ü•§</span>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Kh·ªëi c√° nh√¢n h√≥a */}
      <div className="step36sum-plan-wrap">
        <div className="step36sum-plan-title">
          K·∫ø ho·∫°ch ƒë∆∞·ª£c c√° nh√¢n h√≥a d√†nh cho <b>{fullName || "b·∫°n"}</b> ƒë√£ s·∫µn s√†ng!
        </div>
        <div className="step36sum-plan-grid">
          <div className="step36sum-plan-item">
            <span>‚è±Ô∏è Th·ªùi gian t·∫≠p luy·ªán</span>
            <b>{duration || "--"} </b>
          </div>
          <div className="step36sum-plan-item">
            <span>üí™ C·∫•p ƒë·ªô th·ªÉ h√¨nh</span>
            <b>{fitnessLevel === "beginner" ? "S∆° c·∫•p" : fitnessLevel === "intermediate" ? "Trung c·∫•p" : "Cao c·∫•p"}</b>
          </div>
          <div className="step36sum-plan-item">
            <span>üè† N∆°i t·∫≠p luy·ªán</span>
            <b>{location || "Nh√†"}</b>
          </div>
          <div className="step36sum-plan-item">
            <span>üìÖ C∆∞·ªùng ƒë·ªô</span>
            <b>{workoutFrequency || "3 l·∫ßn/tu·∫ßn"}</b>
          </div>
        </div>
      </div>

      {/* M·ª•c ti√™u ch∆∞∆°ng tr√¨nh */}
      <div className="step36sum-goalswrap">
        <div className="step36sum-goalstitle">M·ª•c ti√™u c·ªßa ch∆∞∆°ng tr√¨nh c·ªßa b·∫°n g·ªìm:</div>
        <ul className="step36sum-goalslist">
          {[goalMap[goal], ...extraGoalsShow].filter(Boolean).map((g, i) =>
            <li key={i}><span>‚úîÔ∏è</span> {g}</li>
          )}
        </ul>
      </div>

      <motion.button className="step36sum-btn" whileTap={{ scale: 0.97 }} onClick={handleRegister}>
        ƒêƒÉng k√Ω ngay
      </motion.button>
    </motion.div>
  );
}
